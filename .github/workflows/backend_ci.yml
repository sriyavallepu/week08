# week08/.github/workflows/backend_ci.yml
# trigger: manual change to run CI
#commit for the workflow
# trigger run - sriya test

name: Backend CI - Test, Build and Push Images to ACR

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

env:
  # Use the exact login server (no protocol, no trailing slash, no newline)
  ACR_LOGIN_SERVER: week8regisry.azurecr.io
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -V
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to Azure (Service Principal JSON in AZURE_CREDENTIALS)
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Log in Docker to ACR using az (works without Docker action)
      - name: ACR Docker Login
        run: az acr login --name week8regisry

      # (Optional) Show folders to confirm build contexts exist
      - name: Show backend folders
        run: |
          pwd
          ls -la
          ls -la ./backend/product_service
          ls -la ./backend/order_service

      # Build & push PRODUCT image (raw docker; tag quoted; context on same line)
      - name: Build & Push PRODUCT (raw docker)
        env:
          ACR_LOGIN_SERVER: ${{ env.ACR_LOGIN_SERVER }}
        run: |
          set -xeuo pipefail
          docker version
          docker info
          docker build -t "${ACR_LOGIN_SERVER}/product_service:latest" -f ./backend/product_service/Dockerfile ./backend/product_service
          docker push "${ACR_LOGIN_SERVER}/product_service:latest"

      # Build & push ORDER image (raw docker; tag quoted; context on same line)
      - name: Build & Push ORDER (raw docker)
        env:
          ACR_LOGIN_SERVER: ${{ env.ACR_LOGIN_SERVER }}
        run: |
          set -xeuo pipefail
          docker build -t "${ACR_LOGIN_SERVER}/order_service:latest" -f ./backend/order_service/Dockerfile ./backend/order_service
          docker push "${ACR_LOGIN_SERVER}/order_service:latest"

      - name: Logout Azure
        if: always()
        run: az logout
