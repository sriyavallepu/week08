# .github/workflows/backend_ci.yml
name: Backend CI - Test, Build and Push Images to ACR

on:
  workflow_dispatch:
  push:
    branches: [ main, development ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'
  pull_request:
    branches: [ development ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

concurrency:
  group: backend-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  # ✅ CORRECT REGISTRY
  ACR_LOGIN_SERVER: week9acr.azurecr.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5432:5432" ]
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [ "5433:5432" ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.10' }
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: pip-${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -V
          pip install --upgrade pip pytest httpx
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q
      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest -q

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends
    steps:
      - uses: actions/checkout@v4

      # ✅ Login to Azure with your AZURE_CREDENTIALS secret
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # ✅ Login to the correct ACR (week9acr)
      - name: ACR Docker Login
        run: az acr login --name week9acr

      - name: Show backend folders (debug)
        run: |
          pwd
          ls -la ./backend/product_service
          ls -la ./backend/order_service

      # ✅ Build & push PRODUCT with SHA + latest tags
      - name: Build & Push PRODUCT (docker)
        env:
          ACR_LOGIN_SERVER: ${{ env.ACR_LOGIN_SERVER }}
        run: |
          set -e
          docker build -t "${ACR_LOGIN_SERVER}/product_service:${{ env.IMAGE_TAG }}" -t "${ACR_LOGIN_SERVER}/product_service:latest" -f ./backend/product_service/Dockerfile ./backend/product_service
          docker push "${ACR_LOGIN_SERVER}/product_service:${{ env.IMAGE_TAG }}"
          docker push "${ACR_LOGIN_SERVER}/product_service:latest"

      # ✅ Build & push ORDER with SHA + latest tags
      - name: Build & Push ORDER (docker)
        env:
          ACR_LOGIN_SERVER: ${{ env.ACR_LOGIN_SERVER }}
        run: |
          set -e
          docker build -t "${ACR_LOGIN_SERVER}/order_service:${{ env.IMAGE_TAG }}" -t "${ACR_LOGIN_SERVER}/order_service:latest" -f ./backend/order_service/Dockerfile ./backend/order_service
          docker push "${ACR_LOGIN_SERVER}/order_service:${{ env.IMAGE_TAG }}"
          docker push "${ACR_LOGIN_SERVER}/order_service:latest"

      - name: Logout Azure
        if: always()
        run: az logout
